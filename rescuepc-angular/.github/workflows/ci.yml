name: 🚀 CI/CD Pipeline - RescuePC Angular

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.17.0'
  PNPM_VERSION: '8.15.0'

jobs:
  # =============================================================================
  # 🔍 CODE QUALITY & LINTING
  # =============================================================================
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint all projects
        run: nx run-many --target=lint --all

      - name: 🎨 Check formatting
        run: nx format:check

  # =============================================================================
  # 🧪 UNIT TESTS
  # =============================================================================
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, api, shared, stripe, license, ui]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run tests
        run: nx test ${{ matrix.project }} --coverage --watch=false

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  # =============================================================================
  # 🏗️ BUILD & COMPILE
  # =============================================================================
  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build frontend
        run: nx build frontend --prod

      - name: 🏗️ Build API
        run: nx build api --prod

      - name: 🏗️ Build libraries
        run: nx run-many --target=build --all

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            .nx/cache/

  # =============================================================================
  # 🧪 E2E TESTS
  # =============================================================================
  e2e:
    name: 🧪 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: 🧪 Run E2E tests
        run: nx e2e frontend-e2e --watch=false

      - name: 📸 Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: apps/frontend-e2e/screenshots/

  # =============================================================================
  # 🔒 SECURITY SCAN
  # =============================================================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: pnpm audit --audit-level=moderate

      - name: 🔍 Run ESLint security rules
        run: nx run-many --target=lint --all --fix

  # =============================================================================
  # 📊 PERFORMANCE TESTING
  # =============================================================================
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: 🚀 Start server
        run: |
          nx serve api &
          sleep 10

      - name: 📊 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4000
          uploadArtifacts: true
          temporaryPublicStorage: true

  # =============================================================================
  # 🚀 DEPLOYMENT
  # =============================================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, build, e2e, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for production
        run: |
          nx build frontend --prod
          nx build api --prod

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🚀 Deploy API to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: rescuepc-api

  # =============================================================================
  # 📈 MONITORING & ALERTS
  # =============================================================================
  monitor:
    name: 📈 Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🔍 Check API health
        run: |
          curl -f https://rescuepc-api.railway.app/api/health || exit 1

      - name: 🔍 Check frontend
        run: |
          curl -f https://rescue-pc-repairs-multi-os-toolkit-ofrjwva13.vercel.app || exit 1

      - name: 📧 Send success notification
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # TODO: Add Slack/Discord notification

      - name: 🚨 Send failure notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # TODO: Add Slack/Discord notification

# =============================================================================
# 📋 WORKFLOW SUMMARY
# =============================================================================
# This workflow ensures:
# ✅ Code quality through linting and formatting
# ✅ Reliability through comprehensive testing
# ✅ Security through audits and scans
# ✅ Performance through Lighthouse testing
# ✅ Automated deployment to production
# ✅ Health monitoring and alerting
# =============================================================================
